from transformers.models.gpt2.modeling_gpt2 import GPT2Model
from transformers import BertTokenizer, BertModel
from einops import rearrange
from transformers.models.gpt2.configuration_gpt2 import GPT2Config
from transformers import AutoTokenizer
import torch
import pandas as pd
gpt2 = GPT2Model.from_pretrained('gpt2', output_attentions=True, output_hidden_states=True)
tokenizer = AutoTokenizer.from_pretrained('gpt2')
data_name = 'DE'
exogenous_variables = ['Wind power','Ampirion zonal load'] 
endogenous_variable = 'German\'s Electricity Price'
data_collection = 'German\'s electricity market'
exogenous_variables_text_template = 'Exogenous'
endogenous_template = 'Endogenous'
dataset_template1 = f'This dataset is {data_name}, containing the data collected from {data_collection}. Exogenous variables are'
dataset_template2 = f' and it is necessary to utilize these external variables sequentially to predict the endogenous variable'
trend_template = ['series shows an overall upward trend',
                  'series initially rises and then declines',
                  'series exhibits an overall declining trend',
                  'series initially declines and then rises']
period_template = ['series has no apparent periodicity',
                   'series exhibits shorter periodicity and higher frequency',
                   'series displays clear periodicity',
                   'series exhibits relatively longer periodicity']
stability_template = ['series undergoes significant instability over all the time',
                      'series remains relatively stable with minimal fluctuations',
                      'series experiences occasional bouts of volatility, interspersed with periods of relative calm',
                      'series shows consistent stability, with values remaining close to a steady mean']
noise_template = ['series is subject to very strong noise interference',
                  'series has a low signal-to-noise ratio, where noise significantly affects the clarity of the underlying data',
                  'series experiences moderate noise, partially obscuring the underlying pattern',
                  'series is not influenced by any noise interference']

nature_attribute_template = {
    'Wind power': [
        'This Exogenous variable is Wind power, representing the electricity generated from wind sources in Germany’s electricity market. The availability of wind energy can fluctuate depending on weather conditions, impacting the overall generation mix and thus influencing electricity prices.',
        'Exogenous Wind power reflects the total energy generated from wind in Germany. Higher wind power generation can reduce the reliance on fossil fuels, potentially lowering electricity prices, especially when the system load is moderate.',
        'Exogenous Wind power captures the electricity produced from wind turbines in Germany. When wind power generation is high, it can reduce demand on conventional power sources and help lower electricity prices during peak periods of demand.',
        'Exogenous Wind power represents the total electricity generated by wind in Germany. Strong winds lead to higher generation, which can reduce electricity prices by increasing supply and balancing out system load.'
    ],
    'Ampirion zonal load': [
        'This Exogenous variable is Ampirion zonal load, indicating the electricity demand within a specific region of Germany. The zonal load can vary based on time of day, seasonal patterns, and economic activities, influencing the price of electricity in the market.',
        'Exogenous Ampirion zonal load reflects the electricity demand within the Ampirion region. During high-demand periods, the zonal load places pressure on the system, potentially driving up electricity prices if the generation is insufficient.',
        'Exogenous Ampirion zonal load represents the electricity consumption in the Ampirion region of Germany. High zonal load, particularly during peak times, can lead to higher electricity prices as the system struggles to meet demand.',
        'Exogenous Ampirion zonal load captures the demand for electricity in a specific region of Germany. When demand increases, the price of electricity may rise if the generation capacity does not match the load, especially during peak hours.'
    ],
    'German\'s Electricity Price': [
        'This Endogenous variable is German\'s Electricity Price, representing the price of electricity in Germany’s market. The price is influenced by the balance between wind power generation, system load, and the overall supply-demand equilibrium.',
        'Endogenous German\'s Electricity Price reflects the electricity price in Germany, which fluctuates based on system load and the contribution of wind power to the overall generation mix. Higher demand or lower generation tends to raise electricity prices.',
        'Endogenous German\'s Electricity Price indicates the price of electricity within Germany’s market. The price is closely tied to the generation mix, with high wind power generation typically lowering prices, while higher demand (zonal load) increases prices.',
        'Endogenous German\'s Electricity Price represents the cost of electricity in Germany. It is influenced by factors such as wind power generation and zonal load, with high demand or low wind power generation driving prices up.'
    ]
}

prompts = []
for v in exogenous_variables:
    for nature_attribute in nature_attribute_template[v]:
        prompts.append(nature_attribute)
    for trend in trend_template:
        prompts.append(exogenous_variables_text_template+' '+ v+' '+ trend + '.')
    for period in period_template:
        prompts.append(exogenous_variables_text_template+' '+ v+' '+ period + '.')
    for stability in stability_template:
        prompts.append(exogenous_variables_text_template+' '+ v+' '+ stability + '.')
    for noise in noise_template:
        prompts.append(exogenous_variables_text_template+' '+ v+' '+ noise + '.')

    dataset_template1 = dataset_template1+' '+v+','
for nature_attribute in nature_attribute_template[endogenous_variable]:
    prompts.append(nature_attribute)
for trend in trend_template:
    prompts.append(endogenous_template+' '+ endogenous_variable+' '+ trend + '.')
for period in period_template:
    prompts.append(endogenous_template+' '+ endogenous_variable+' '+ period + '.')
for stability in stability_template:
    prompts.append(endogenous_template+' '+ endogenous_variable+' '+ stability + '.')
for noise in noise_template:
    prompts.append(endogenous_template+' '+ endogenous_variable+' '+ noise + '.')

dataset_template2 = dataset_template2 + ' ' +  endogenous_variable+ '.'
dataset_template1 = dataset_template1 + dataset_template2
prompts.append(dataset_template1)
text_emds = []
eos_token = "<|endoftext|>" 
for p in prompts:
    prompts_with_eos = p + eos_token
    tokens = tokenizer(prompts_with_eos, padding=False, truncation=True, return_tensors="pt")
    input_ids = tokens["input_ids"]
    with torch.no_grad():
        outputs = gpt2(input_ids=input_ids)
    text_emds.append(outputs.last_hidden_state[:,-1])
text_emds = torch.cat(text_emds,dim=0)
torch.save(text_emds, data_name+'.pt')